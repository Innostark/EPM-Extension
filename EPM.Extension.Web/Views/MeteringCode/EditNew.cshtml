@using System.Configuration
@using EPM.Extension.Model
@model EPM.Extension.Model.MeteringPoint
@{
    ViewBag.Title = "Metering Point Edit";
    string tag = "";

}
<style>
    table.dataTable thead th, table.dataTable thead td {
        padding: 0 0;
    }
</style>
<h2>@EPM.Extension.Web.Resources.MeteringCode.Details</h2>

<div>
    <h4>@EPM.Extension.Web.Resources.Customer.SubTitle</h4>
    <hr />

    <div class="form-group">
        @Html.LabelFor(model => model.Code, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Code, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Code, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Zählpunktbezeichner, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Zählpunktbezeichner, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Zählpunktbezeichner, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Kurzbezeichnung, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Kurzbezeichnung, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Kurzbezeichnung, "", new { @class = "text-danger" })
        </div>
    </div>



    <div class="form-group">
        @Html.LabelFor(model => model.Strasse, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Strasse, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Strasse, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.PLZ, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.PLZ, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.PLZ, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Ort, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Ort, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Ort, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.DatenversandAktiv, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.DatenversandAktiv, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.DatenversandAktiv, "", new { @class = "text-danger" })
        </div>
    </div>





    <div class="form-group">
        @Html.LabelFor(model => model.CrmAccountName, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.CrmAccountName, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.CrmAccountName, "", new { @class = "text-danger" })
        </div>
    </div>


    <div class="form-group">
        @Html.LabelFor(model => model.BetreiberName, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.BetreiberName, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.BetreiberName, "", new { @class = "text-danger" })
        </div>
    </div>



    <div class="form-group">
        @Html.LabelFor(model => model.VNBName, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.VNBName, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.VNBName, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.ZählverfahrenValue, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.ZählverfahrenValue, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.ZählverfahrenValue, "", new { @class = "text-danger" })
        </div>
    </div>



    <div class="form-group">
        @Html.LabelFor(model => model.UMessungValue, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.UMessungValue, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.UMessungValue, "", new { @class = "text-danger" })
        </div>
    </div>



    <div class="form-group">
        @Html.LabelFor(model => model.UEntnahmeValue, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.UEntnahmeValue, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.UEntnahmeValue, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Kundenrückmeldung, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.TextAreaFor(model => model.Kundenrückmeldung, new { @class = "form-control", @cols = 40, @rows = 3 })
            @Html.ValidationMessageFor(model => model.Kundenrückmeldung, "", new { @class = "text-danger" })
        </div>
    </div>
</div>

<div>
    <h4>@EPM.Extension.Web.Resources.SiteSpecifications.Standortspezifkationen</h4>
    <hr />

    <div class="form-group">
        @Html.LabelFor(model => model.KundenspezifikationZp.KlimatisierungAktivValue, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.KundenspezifikationZp.KlimatisierungAktivValue, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.KundenspezifikationZp.KlimatisierungAktivValue, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.KundenspezifikationZp.Gesamtflache, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.KundenspezifikationZp.Gesamtflache, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.KundenspezifikationZp.Gesamtflache, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.KundenspezifikationZp.Nebenflache, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.KundenspezifikationZp.Nebenflache, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.KundenspezifikationZp.Nebenflache, "", new { @class = "text-danger" })
        </div>
    </div>



    <div class="form-group">
        @Html.LabelFor(model => model.KundenspezifikationZp.BeheizteFlache, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.KundenspezifikationZp.BeheizteFlache, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.KundenspezifikationZp.BeheizteFlache, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.KundenspezifikationZp.UnbeheizteFlache, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.KundenspezifikationZp.UnbeheizteFlache, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.KundenspezifikationZp.UnbeheizteFlache, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.KundenspezifikationZp.SonstigeFlachen, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.KundenspezifikationZp.SonstigeFlachen, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.KundenspezifikationZp.SonstigeFlachen, "", new { @class = "text-danger" })
        </div>
    </div>
</div>

<div>
    <h4>@EPM.Extension.Web.Resources.SiteSpecifications.Notiz</h4>
    <hr />

    <div class="form-group">
        @Html.LabelFor(model => model.KundenspezifikationZp.Notizfeld, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.TextAreaFor(model => model.KundenspezifikationZp.Notizfeld, new { @class = "form-control", @cols = 40, @rows = 3 })
            @Html.ValidationMessageFor(model => model.KundenspezifikationZp.Notizfeld, "", new { @class = "text-danger" })
        </div>
    </div>
</div>

<div>
    <h4>@EPM.Extension.Web.Resources.SiteSpecifications.EmpfängerFürBerichte</h4>
    <hr />

    <div class="form-group">
        @Html.LabelFor(model => model.MeteringCodeThresholds.FirstOrDefault().Empfaenger1, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.MeteringCodeThresholds.FirstOrDefault().Empfaenger1, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.MeteringCodeThresholds.FirstOrDefault().Empfaenger1, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.MeteringCodeThresholds.FirstOrDefault().Empfaenger2, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.MeteringCodeThresholds.FirstOrDefault().Empfaenger2, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.MeteringCodeThresholds.FirstOrDefault().Empfaenger2, "", new { @class = "text-danger" })
        </div>
    </div>
    
    <div class="form-group">
        @Html.LabelFor(model => model.MeteringCodeThresholds.FirstOrDefault().Empfaenger3, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.MeteringCodeThresholds.FirstOrDefault().Empfaenger3, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.MeteringCodeThresholds.FirstOrDefault().Empfaenger3, "", new { @class = "text-danger" })
        </div>
    </div>
</div>




<div class="modal fade" id="edit-threshold" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div id="edit-threshold-container" class="modal-dialog">
        <div id="form-content" class="modal-content">

        </div>
    </div>
</div>

<div class="row-fluid">
    <h2>@EPM.Extension.Web.Resources.MeteringCodeThreshold.Title</h2>
    <div class="span12">
        <table id="ThresholdTable" class="table display table-responsive">
            <thead>
                <tr>
                    <th style="display: none;"></th>
                    <th style="width:5%">@EPM.Extension.Web.Resources.MeteringCodeThreshold.Active</th>
                    <th style="width:10%">@EPM.Extension.Web.Resources.MeteringCodeThreshold.Threshold</th>
                    <th style="width:10%">@EPM.Extension.Web.Resources.MeteringCodeThreshold.Col9</th>
                    <th>@EPM.Extension.Web.Resources.MeteringCodeThreshold.Col2</th>
                    <th>@EPM.Extension.Web.Resources.MeteringCodeThreshold.Col3</th>
                    <th>@EPM.Extension.Web.Resources.MeteringCodeThreshold.Col4</th>
                    <th>@EPM.Extension.Web.Resources.MeteringCodeThreshold.Col5</th>
                    <th>@EPM.Extension.Web.Resources.MeteringCodeThreshold.Col6</th>
                    <th>@EPM.Extension.Web.Resources.MeteringCodeThreshold.Col7</th>
                    <th>@EPM.Extension.Web.Resources.MeteringCodeThreshold.Col8</th>

                    <th style="width:5%"></th>
            </thead>
            <tbody>
                @foreach (var item in Model.MeteringCodeThresholds)
                    {
                    <tr id="type_@item.Type">
                        <td style="display: none;">@item.Id</td>
                        <td id="@{ Write(@item.Type + "_isActive");}">
                            @{
                        W‌rite(item.IsActive ? @EPM.Extension.Web.Resources.MeteringCodeThreshold.Yes : @EPM.Extension.Web.Resources.MeteringCodeThreshold.No);
                            }

                        </td>



                        <td>@item.GrenzwertType</td>
                        <td>@item.GultingAb.ToString("dd-MM-yyyy") </td>
                        <td>

                            @{
                        W‌rite(item.SaisonalitatAnwenden ? "Ja" : "Nein");
                            }
                        </td>
                        <td> <span class="float-right">@item.MinimaGlobalInt</span></td>
                        <td><span class="float-right">@item.MaximaGlobalInt</span> </td>
                        <td><span class="float-right">@item.MinimaSommerInt</span></td>
                        <td><span class="float-right"> @item.MaximaSommerInt</span></td>
                        <td><span class="float-right">@item.MinimaWinterInt</span></td>
                        <td><span class="float-right"> @item.MaximaWinterInt</span></td>

                        <td>
                            @{
                        if (item.Type == EPM.Extension.Model.MeteringPointThresholdType.User)
                        {
                            tag = "<a id='addMeteringCodeThreshold' class='cursorHand' data-toggle='modal' data-target='#myModal'>Edit</a>";
                        }
                            }
                            @Html.Raw(tag)
                        </td>
                    </tr>
                    }
            </tbody>
        </table>

    </div>
</div>

<p>
    @{
            if (Request.UrlReferrer != null && !string.IsNullOrEmpty(Request.UrlReferrer.Host))
            {
        <a href="@Request.UrlReferrer">Back</a>
            }
    }

</p>
@section scripts
{
    <script type="text/javascript">
        var oldModel;
        var newModel;
        function saveClicked() {
            newModel = getFormValues();
            //set -1 for the unchanged value
            if (setChangedValues(newModel)) {
                var postUrl = "@ConfigurationManager.AppSettings["SiteUrl"]" + "MeteringCodeThreshold/Edit";
                $.ajax({
                    type: "POST",
                    datatype: "json",
                    url: postUrl,
                    data: newModel,
                    success: function (data) {
                        // Set values
                        alert('@EPM.Extension.Web.Resources.MeteringCodeThreshold.SuccessfullySavedChanges');
                        var t = $('#type_User')[0];
                        var array = [
                            newModel.Id, newModel.GrenzwertBezeichner, newModel.GultingAb, newModel.SaisonalitatAnwenden, newModel.MinimaGlobal,
                            newModel.MaximaGlobal, newModel.MinimaSommer, newModel.MaximaSommer, newModel.MinimaWinter, newModel.MaximaWinter
                        ];
                        if (newModel.MaximaGlobal !== null || newModel.MinimaGlobal !== null
                            || newModel.MaximaWinter !== null || newModel.MinimaWinter !== null
                            || newModel.MaximaSommer !== null || newModel.MinimaSommer !== null) {
                            $('#System_isActive')[0].innerText = "No";
                            $('#User_isActive')[0].innerText = "Yes";
                        }
                        $('#type_User td:eq(3)')[0].innerText = newModel.GultingAb;
                        $('#type_User td:eq(4)')[0].innerHTML = newModel.SaisonalitatAnwenden === "true" ? "Ja" : "Nein";
                        $('#type_User td:eq(5)')[0].innerHTML = "<span class='float-right'>" + newModel.MinimaGlobal + "</span>";
                        $('#type_User td:eq(6)')[0].innerHTML = "<span class='float-right'>" + newModel.MaximaGlobal + "</span>";
                        $('#type_User td:eq(7)')[0].innerHTML = "<span class='float-right'>" + newModel.MinimaSommer + "</span>";
                        $('#type_User td:eq(8)')[0].innerHTML = "<span class='float-right'>" + newModel.MaximaSommer + "</span>";
                        $('#type_User td:eq(9)')[0].innerHTML = "<span class='float-right'>" + newModel.MinimaWinter + "</span>";
                        $('#type_User td:eq(10)')[0].innerHTML = "<span class='float-right'>" + newModel.MaximaWinter + "</span>";


                        $('#edit-threshold').modal('hide');
                    },
                    error: callError
                });
            }
            //else {
            //    callError();
            //}
        }
        function callError() {
            alert('@EPM.Extension.Web.Resources.MeteringCodeThreshold.ProblemSavingChanges');
        }
        function getFormValues() {
            return {
                Id: $('#edit-threshold #Id').val(),
                GrenzwertBezeichner: $('#edit-threshold #GrenzwertBezeichner').val(),
                GultingAb: $('#edit-threshold #GultingAb').val(),
                SaisonalitatAnwenden: $('#edit-threshold #SaisonalitatAnwenden').val(),
                MinimaGlobal: $('#edit-threshold #MinimaGlobal').val(),
                MaximaGlobal: $('#edit-threshold #MaximaGlobal').val(),
                MinimaSommer: $('#edit-threshold #MinimaSommer').val(),
                MaximaSommer: $('#edit-threshold #MaximaSommer').val(),
                MinimaWinter: $('#edit-threshold #MinimaWinter').val(),
                MaximaWinter: $('#edit-threshold #MaximaWinter').val()
            };
        }
        function setChangedValues(newModelValues) {
            //if (oldModel.GrenzwertBezeichner == newModelValues.GrenzwertBezeichner) {
            //    newModel.GrenzwertBezeichner = -1;
            //}
            //if (oldModel.SaisonalitatAnwenden == newModelValues.SaisonalitatAnwenden) {
            //    newModel.SaisonalitatAnwenden = -1;
            //}
            if (oldModel.GultingAb == newModelValues.GultingAb) {
                newModel.GultingAb = -1;
            }

            if ($("#edit-threshold #SaisonalitatAnwenden").is(":checked")) {

                if (newModelValues.MinimaSommer == "0" || newModelValues.MaximaSommer == "0" || newModelValues.MinimaWinter == "0" ||
                newModelValues.MaximaWinter == "0") {
                    alert('@EPM.Extension.Web.Resources.MeteringCodeThreshold.ValueGreaterThanZero');
                    return false;
                }

                if (oldModel.MinimaSommer == newModelValues.MinimaSommer) {
                    newModel.MinimaSommer = -1;
                }
                if (oldModel.MaximaSommer == newModelValues.MaximaSommer) {
                    newModel.MaximaSommer = -1;
                }
                if (oldModel.MinimaWinter == newModelValues.MinimaWinter) {
                    newModel.MinimaWinter = -1;
                }
                if (oldModel.MaximaWinter == newModelValues.MaximaWinter) {
                    newModel.MaximaWinter = -1;
                }
            }
            else {

                if (newModelValues.MinimaGlobal == "0" || newModelValues.MaximaGlobal == "0") {
                    alert('@EPM.Extension.Web.Resources.MeteringCodeThreshold.ValueGreaterThanZero');
                    return false;
                }

                if (oldModel.MinimaGlobal == newModelValues.MinimaGlobal) {
                    newModel.MinimaGlobal = -1;
                }
                if (oldModel.MaximaGlobal == newModelValues.MaximaGlobal) {
                    newModel.MaximaGlobal = -1;
                }
            }
            return true;
        }
        $(document).ready(function () {

            var thresholdTable = $('#ThresholdTable').dataTable({
                "bFilter": false,
                "bInfo": false,
                "bLengthChange": false,
                "bSort": false
            });
            $('#ThresholdTable_paginate').hide();
            $('#addMeteringCodeThreshold').click(function (e) {
                var data = thresholdTable.fnGetData($(this).parent().parent()[0])[0];
                var url = "/MeteringCodeThreshold/Edit/" + data + "?stamp=" + new Date().getTime(); // the url to the controller
                $.get(url, function (data) {
                    $('#form-content').html(data);
                    $('#edit-threshold').modal('show');

                    oldModel = getFormValues();
                });
            });


            $('#ThresholdTable tbody').on('click', 'tr', function () {
                if ($(this).hasClass('selected')) {
                    $(this).removeClass('selected');
                } else {
                    thresholdTable.$('tr.selected').removeClass('selected');
                    $(this).addClass('selected');
                }
            });
            $('#ThresholdTable').on('click', '.edit', function (e) {
                e.preventDefault();
                var nRow = $(this).parents('tr')[0];
                var aData = thresholdTable.fnGetData(nRow);
                window.location.href = "/MeteringCode/Edit/" + aData.Id;
            });
        });
    </script>
}
