@using System.Configuration
@using EPM.Extension.Model
@model EPM.Extension.Model.MeteringPoint

@{
    ViewBag.Title = "Metering Point Detail";
    string isActive = "Yes";
    string tag = "";
    var tId = Model.MeteringCodeThresholds.Any() ? Model.MeteringCodeThresholds.First().Id : Guid.Empty;
}

<style>
    .navbar {
        display: none;
    }

    footer {
        display: none;
    }

    table.dataTable thead th, table.dataTable thead td {
        padding: 0 0;
    }

    .container {
        margin-left: 10px !important;
        margin-right: 10px !important;
    }

    .modal-dialog {
        left: 10%;
        margin-left: 0 !important;
        margin-right: 0 !important;
    }

    th, td {
        border-right: 1px solid white;
    }

    table, td {
        font-weight: bold !important;
        font-size: 10px;
    }

    tr:nth-child(even) {
        background-color: #DBDBFF !important;
    }

    tr:nth-child(odd) td {
        border-right: 1px solid #DBDBFF !important;
    }

    .float-left {
        float: left;
    }

    table.pretty thead th {
        text-align: left;
        background: #6D92FF;
        color: white;
        padding-left: 10px !important;
    }

    html * {
        font-size: 10px !important;
    }
</style>

<div class="modal fade" id="edit-threshold" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div id="edit-threshold-container" class="modal-dialog">
        <div id="form-content" class="modal-content">

        </div>
    </div>
</div>


<div class="row-fluid">

    <div class="span12">
        <table id="ThresholdTable" class="pretty table display table-responsive">
            <thead>
                <tr>
                    <th style="display: none;"></th>
                    <th style="width:5%">@EPM.Extension.Web.Resources.MeteringCodeThreshold.Active</th>
                    <th style="width:7%">@EPM.Extension.Web.Resources.MeteringCodeThreshold.Threshold</th>
                    <th style="width:6%">@EPM.Extension.Web.Resources.MeteringCodeThreshold.Col9</th>
                    <th style="width:6%">@EPM.Extension.Web.Resources.MeteringCodeThreshold.Col2</th>
                    <th style="width:6%">@EPM.Extension.Web.Resources.MeteringCodeThreshold.Col3</th>
                    <th style="width:6%">@EPM.Extension.Web.Resources.MeteringCodeThreshold.Col4</th>
                    <th style="width:7%">@EPM.Extension.Web.Resources.MeteringCodeThreshold.Col5</th>
                    <th style="width:7%">@EPM.Extension.Web.Resources.MeteringCodeThreshold.Col6</th>
                    <th style="width:6%">@EPM.Extension.Web.Resources.MeteringCodeThreshold.Col7</th>
                    <th style="width:6%">@EPM.Extension.Web.Resources.MeteringCodeThreshold.Col8</th>

                    <th style="width:5%;border-right: 0px solid white;"></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.MeteringCodeThresholds)
                {
                    <tr id="type_@item.Type">
                        <td style="display: none;">@item.Id</td>
                        <td id="@{ Write(@item.Type + "_isActive");}">
                            @{
                    W‌rite(item.IsActive ? @EPM.Extension.Web.Resources.MeteringCodeThreshold.Yes : @EPM.Extension.Web.Resources.MeteringCodeThreshold.No);
                            }

                        </td>

                        <td>@item.GrenzwertType</td>
                        <td>@item.GultingAb.ToString("dd-MM-yyyy") </td>
                        <td>
                            @{
                    W‌rite(item.SaisonalitatAnwenden ? "Ja" : "Nein");
                        }
                    </td>
                    <td> <span class="float-right">@item.MinimaGlobalInt</span></td>
                    <td><span class="float-right">@item.MaximaGlobalInt</span> </td>
                    <td><span class="float-right">@item.MinimaSommerInt</span></td>
                    <td><span class="float-right"> @item.MaximaSommerInt</span></td>
                    <td><span class="float-right">@item.MinimaWinterInt</span></td>
                    <td><span class="float-right"> @item.MaximaWinterInt</span></td>

                    <td style="border-right: 0 solid white;">
                        @{
                    if (item.Type == EPM.Extension.Model.MeteringPointThresholdType.User)
                    {
                        tag = "<a id='addMeteringCodeThreshold' class='cursorHand' data-toggle='modal' data-target='#myModal'>Edit</a>";
                    }
                        }
                        @Html.Raw(tag)
                    </td>

                </tr>
                }
            </tbody>
        </table>
    </div>
</div>
@if (@Model.MeteringCodeThresholds.Count() > 1)
{
    <div class="row-fluid">
        <div class="form-group">
            @Html.Label(@EPM.Extension.Web.Resources.MeteringCodeThreshold.EmailReport, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-9">
                @Html.DropDownList("Reports", ViewBag.List as SelectList, new { @class = "form-control", id = "reportDdl", })
            </div>
            <div class="col-md-1">
                <button id="saveReport" class="btn btn-primary">Save</button>
            </div></div>
    </div>
    <div class="row-fluid">
        <div class="form-group">
            @Html.Label(@EPM.Extension.Web.Resources.MeteringCodeThreshold.Empfaenger1, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBox("Empfaenger1", @Model.MeteringCodeThresholds.FirstOrDefault().Empfaenger1, new { @class = "form-control", id = "Empfaenger1", })
            </div>
        </div>
        <div class="form-group">
            @Html.Label(@EPM.Extension.Web.Resources.MeteringCodeThreshold.Empfanger2, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBox("Empfaenger2", @Model.MeteringCodeThresholds.FirstOrDefault().Empfaenger2, new { @class = "form-control", id = "Empfaenger2", })
            </div>
        </div>
        <div class="form-group">
            @Html.Label(@EPM.Extension.Web.Resources.MeteringCodeThreshold.Empfänger3, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBox("Empfaenger3", @Model.MeteringCodeThresholds.FirstOrDefault().Empfaenger2, new { @class = "form-control", id = "Empfaenger3", })
            </div>
        </div>
    </div>
}
@section scripts
{
    <script type="text/javascript">
        var oldModel;
        var newModel;
        function saveClicked() {
            newModel = getFormValues();
            //set -1 for the unchanged value
            if (setChangedValues(newModel)) {
                var postUrl = "@ConfigurationManager.AppSettings["SiteUrl"]" + "MeteringCodeThreshold/Edit";
                $.ajax({
                    type: "POST",
                    datatype: "json",
                    url: postUrl,
                    data: newModel,
                    success: function (data) {
                        // Set values
                        alert('Changes saved successfully.');
                        var t = $('#type_User')[0];
                        var array = [
                            newModel.Id, newModel.GrenzwertBezeichner, newModel.GultingAb, newModel.SaisonalitatAnwenden, newModel.MinimaGlobal,
                            newModel.MaximaGlobal, newModel.MinimaSommer, newModel.MaximaSommer, newModel.MinimaWinter, newModel.MaximaWinter
                        ];
                        if (newModel.MaximaGlobal !== null || newModel.MinimaGlobal !== null
                            || newModel.MaximaWinter !== null || newModel.MinimaWinter !== null
                            || newModel.MaximaSommer !== null || newModel.MinimaSommer !== null) {
                            $('#System_isActive')[0].innerText = "No";
                            $('#User_isActive')[0].innerText = "Yes";
                        }
                        $('#type_User td:eq(3)')[0].innerText = newModel.GultingAb;
                        $('#type_User td:eq(4)')[0].innerHTML = newModel.SaisonalitatAnwenden === "true" ? "Ja" : "Nein";
                        $('#type_User td:eq(5)')[0].innerHTML = "<span class='float-right'>" + newModel.MinimaGlobal + "</span>";
                        $('#type_User td:eq(6)')[0].innerHTML = "<span class='float-right'>" + newModel.MaximaGlobal + "</span>";
                        $('#type_User td:eq(7)')[0].innerHTML = "<span class='float-right'>" + newModel.MinimaSommer + "</span>";
                        $('#type_User td:eq(8)')[0].innerHTML = "<span class='float-right'>" + newModel.MaximaSommer + "</span>";
                        $('#type_User td:eq(9)')[0].innerHTML = "<span class='float-right'>" + newModel.MinimaWinter + "</span>";
                        $('#type_User td:eq(10)')[0].innerHTML = "<span class='float-right'>" + newModel.MaximaWinter + "</span>";


                        $('#edit-threshold').modal('hide');
                    },
                    error: callError
                });
            } else {
                callError();
            }
        }

        function callError() {
            alert("Problem in Saving Changes.");
        }

        function getFormValues() {
            return {
                Id: $('#edit-threshold #Id').val(),
                GrenzwertBezeichner: $('#edit-threshold #GrenzwertBezeichner').val(),
                GultingAb: $('#edit-threshold #GultingAb').val(),
                SaisonalitatAnwenden: $('#edit-threshold #SaisonalitatAnwenden').val(),
                MinimaGlobal: $('#edit-threshold #MinimaGlobal').val(),
                MaximaGlobal: $('#edit-threshold #MaximaGlobal').val(),
                MinimaSommer: $('#edit-threshold #MinimaSommer').val(),
                MaximaSommer: $('#edit-threshold #MaximaSommer').val(),
                MinimaWinter: $('#edit-threshold #MinimaWinter').val(),
                MaximaWinter: $('#edit-threshold #MaximaWinter').val()
            };
        }
        function setChangedValues(newModelValues) {
            //if (oldModel.GrenzwertBezeichner == newModelValues.GrenzwertBezeichner) {
            //    newModel.GrenzwertBezeichner = -1;
            //}
            //if (oldModel.SaisonalitatAnwenden == newModelValues.SaisonalitatAnwenden) {
            //    newModel.SaisonalitatAnwenden = -1;
            //}
            
            if (oldModel.GultingAb == newModelValues.GultingAb) {
                newModel.GultingAb = -1;
            }

            if ($("#edit-threshold #SaisonalitatAnwenden").is(":checked")) {

                if (newModelValues.MinimaSommer == "0" || newModelValues.MaximaSommer == "0" || newModelValues.MinimaWinter == "0" ||
                newModelValues.MaximaWinter == "0") {
                    alert('@EPM.Extension.Web.Resources.MeteringCodeThreshold.ValueGreaterThanZero');
                    return false;
                }
                
                if (oldModel.MinimaSommer == newModelValues.MinimaSommer) {
                    newModel.MinimaSommer = -1;
                }
                if (oldModel.MaximaSommer == newModelValues.MaximaSommer) {
                    newModel.MaximaSommer = -1;
                }
                if (oldModel.MinimaWinter == newModelValues.MinimaWinter) {
                    newModel.MinimaWinter = -1;
                }
                if (oldModel.MaximaWinter == newModelValues.MaximaWinter) {
                    newModel.MaximaWinter = -1;
                }
            }
            else {

                if (newModelValues.MinimaGlobal == "0" || newModelValues.MaximaGlobal == "0") {
                    alert('@EPM.Extension.Web.Resources.MeteringCodeThreshold.ValueGreaterThanZero');
                    return false;
                }

                if (oldModel.MinimaGlobal == newModelValues.MinimaGlobal) {
                    newModel.MinimaGlobal = -1;
                }
                if (oldModel.MaximaGlobal == newModelValues.MaximaGlobal) {
                    newModel.MaximaGlobal = -1;
                }
            }
            return true;
        }

        $(document).ready(function () {
            var thresholdTable = $('#ThresholdTable').dataTable({
                "bInfo": false,
                "bFilter": false,
                "bSort": false,
                "bLengthChange": false,
            });
            $('#ThresholdTable_paginate').hide();
            $('#addMeteringCodeThreshold').click(function (e) {
                var data = thresholdTable.fnGetData($(this).parent().parent()[0])[0];
                var url = "/MeteringCodeThreshold/Edit/" + data + "?stamp=" + new Date().getTime(); // the url to the controller
                $.get(url, function (data) {
                    $('#form-content').html(data);
                    $('#edit-threshold').modal('show');

                    oldModel = getFormValues();
                });
            });


            $('#ThresholdTable tbody').on('click', 'tr', function () {
                if ($(this).hasClass('selected')) {
                    $(this).removeClass('selected');
                } else {
                    thresholdTable.$('tr.selected').removeClass('selected');
                    $(this).addClass('selected');
                }
            });

            function getReportFormValues() {
                var thesholdId = '@tId';
                var optionSelected = $('#reportDdl').val();
                var empfaenger1 = $('#Empfaenger1').val();
                var empfaenger2 = $('#Empfaenger2').val();
                var empfaenger3 = $('#Empfaenger3').val();

                if (optionSelected !== '0') {
                    return {
                        id: thesholdId,
                        option: optionSelected,
                        Empfaenger1: empfaenger1,
                        Empfaenger2: empfaenger2,
                        Empfaenger3: empfaenger3
                    };
                }
                return false;

            }
            $('#saveReport').click(function (e) {
                var newModel = getReportFormValues();
                if (newModel) {
                    var postUrl = "@ConfigurationManager.AppSettings["SiteUrl"]" + "MeteringCodeThreshold/SaveReport";
                    $.ajax({
                        type: "POST",
                        datatype: "json",
                        url: postUrl,
                        data: newModel,
                        success: function (data) {
                            // Set values
                            alert('Changes saved successfully.');
                        },
                        error: callError
                    });
                }

            });
            $('#ThresholdTable').on('click', '.edit', function (e) {
                e.preventDefault();
                var nRow = $(this).parents('tr')[0];
                var aData = thresholdTable.fnGetData(nRow);
                window.location.href = "/MeteringCode/Edit/" + aData.Id;
            });
        });
    </script>
}
